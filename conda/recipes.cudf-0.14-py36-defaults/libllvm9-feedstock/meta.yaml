{% set version = "9.0.1" %}
{% set sha256 = "00a1ee1f389f81e9979f3a640a01c431b3021de0d42278f6508391a2f0b81c9a" %}
{% set libcxx_compiler_version="4.0.1" %}  # set to minimum support version

{% set build_number = 1 %}
{% set major_ver = version.split(".")[0] %}

{% set posix = 'm2-' if win else '' %}

package:
  name: llvm-package
  version: {{ version }}

source:
  url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version }}/llvm-{{ version }}.src.tar.xz
  sha256: {{ sha256 }}
  patches:
    - patches/intel-D47188-svml-VF.patch    # Fixes vectorizer and extends SVML support
    #- patches/expect-fastmath-entrypoints-in-add-TLI-mappings.ll.patch # adjusts test added in 10.0.0 for intel-D47188-svml-VF.patch effects
    # Revert an upstream change for Numba
    # ref: https://github.com/numba/llvmlite/blob/v0.29.0/conda-recipes/0001-Revert-Limit-size-of-non-GlobalValue-name.patch
    - patches/numba-0001-Revert-Limit-size-of-non-GlobalValue-name.patch
    - patches/amd-roc-2.7.0.diff
    - patches/numba-0001-Revert-NVPTX-Use-atomicrmw-fadd-instead-of-intrinsic.patch
    - patches/numba-0002-Revert-NVPTX-Remove-now-unused-atomic.load.add.f32-i.patch

build:
  number: {{ build_number }}
  skip: true  # [(win and vc<14) or aarch64 or ppc64le]
  merge_build_host: false

requirements:
  build:
    - {{ compiler('cxx') }}            # [linux]
    - vs2017_{{ target_platform  }}    # [win]
    - clang_bootstrap_osx-64           # [osx]
    - cmake
    - ninja     # [win]
    - python    >=3
    - {{posix}}make
    - {{posix}}patch
    - libcxx >={{libcxx_compiler_version}}  # [osx]
  host:
    - libcxx >={{libcxx_compiler_version}}  # [osx]

outputs:
  # Contains everything
  - name: llvmdev
    script: install_llvm.sh  # [not win]
    script: install_llvm.bat  # [win]
    build:
      skip: true  # [(win and vc<14) or aarch64 or ppc64le]
      activate_in_script: true
    requirements:
      build:
        - {{ compiler('cxx') }}            # [linux]
        - vs2017_{{ target_platform  }}    # [win]
        - clang_bootstrap_osx-64           # [osx]
        - cmake
        - ninja     # [win]
        - python    >=3
      host:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - {{ pin_subpackage("llvm-tools", exact=True) }}
      run:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
        - {{ pin_subpackage("llvm-tools", exact=True) }}
        - libcxx >={{ libcxx_compiler_version }}  # [osx]
    test:
      commands:
        - $PREFIX/bin/llvm-config --libs                         # [not win]
        - if not exist %LIBRARY_INC%\\llvm\\Pass.h exit 1        # [win]
        - test -f $PREFIX/include/llvm/Pass.h                    # [unix]
        - test -f $PREFIX/lib/libLLVMCore.a                      # [not win]
        - $PREFIX/libexec/llvm/not false                               # [not win]
        - if not exist "%LIBRARY_PREFIX%"\\libexec\llvm\not.exe exit 1        # [win]

  # Contains the shared libraries. To make different LLVM libraries co-installable
  # soversion is appended to the package name.
  - name: libllvm{{ major_ver }}
    script: install_llvm.sh  # [not win]
    build:
      skip: true  # [(win and vc<14) or aarch64 or ppc64le]
      activate_in_script: true
      run_exports:   # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}  # [not win]
    requirements:
      build:
        - {{ compiler('cxx') }}            # [linux]
        - vs2017_{{ target_platform  }}    # [win]
        - clang_bootstrap_osx-64           # [osx]
        - cmake                    # [not win]
        - python    >=3            # [not win]
      host:
        - libcxx >={{ libcxx_compiler_version }}  # [osx]
      run:
        - libcxx >={{ libcxx_compiler_version }}  # [osx]
    test:
      commands:
        - test -f $PREFIX/lib/libLLVM-{{ major_ver }}${SHLIB_EXT}  # [unix]

  # This is a meta package so that people can use the latest libllvm and also
  # for run_exports
  - name: llvm
    build:
      skip: true  # [(win and vc<14) or aarch64 or ppc64le]
      run_exports:   # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, max_pin="x.x") }}  # [not win]
    requirements:
      build:
      host:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}  # [not win]
      run:   # [not win]
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}  # [not win]
      run_constrained:   # [not win]
        - llvmdev   {{ version }}                                  # [not win]
    test:
      commands:
        - echo "Hello World!"

  # Contains LLVM tools
  - name: llvm-tools
    script: install_llvm.sh  # [not win]
    script: install_llvm.bat  # [win]
    build:
      skip: true  # [(win and vc<14) or aarch64 or ppc64le]
      activate_in_script: true
    requirements:
      build:
        - {{ compiler('cxx') }}            # [linux]
        - vs2017_{{ target_platform  }}    # [win]
        - clang_bootstrap_osx-64           # [osx]
        - cmake
        - ninja     # [win]
        - python    >=3
        - {{posix}}make
        - {{posix}}patch
      host:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
      run:
        - {{ pin_subpackage("libllvm" + major_ver, exact=True) }}
      run_constrained:
        - llvmdev   {{ version }}
    test:
      commands:
        - $PREFIX/bin/llc -version                               # [not win]
        - if not exist "%LIBRARY_BIN%"\\llc.exe exit 1           # [win]
        - llc -version                                           # [win]

  - name: lit
    build:
      noarch: python
      script: python -m pip install utils/lit --no-deps -vv
      activate_in_script: true
      skip: true  # [not linux]
      entry_points:
        - lit = lit:main
    requirements:
      host:
        - python >=3
        - pip
      run:
        - python
    test:
      imports:
        - lit

about:
  home: http://llvm.org/
  dev_url: https://github.com/llvm-mirror/llvm
  license: Apache-2.0 WITH LLVM-exception
  license_file: LICENSE.TXT
  license_family: Apache
  summary: Development headers and libraries for LLVM

extra:
  recipe-maintainers:
    - inducer
    - jakirkham
    - mingwandroid
    - SylvainCorlay
    - isuruf
    - timsnyder
